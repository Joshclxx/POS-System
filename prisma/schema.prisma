// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //   output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//testing
//Users related model---------------------------------------------------------------
model User {
  id         String   @id @default(uuid())
  firstname  String
  middlename String
  lastname   String
  suffix String?
  gender        Gender
  email      String   
  password    String
  role       Role  
  shift      Shift[]
  // cashpick Cashpick[]
  orders Order[]
  spotCheck Spotcheck[]
  // voidOrder VoidedOrder[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime?

  @@unique([email, password])
}

model Shift {
  id        Int      @id @default(autoincrement())
  shiftType shiftType  @default(opening)
  shiftIn   DateTime @default(now())
  shiftOut  DateTime?
  startingCash Float
  cashpickAmount Float
  voidedAmount Float
  totalCash Float
  userId String 
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// model Cashpick{
//   id Int @id @default(autoincrement())
//   shiftId Int 
//   shift Shift @relation(fields: [shiftId], references: [id])
//   userId String 
//   user User @relation(fields: [userId], references: [id])
//   createdAt DateTime @default(now())
// }

model Spotcheck {
  id Int @id @default(autoincrement())
  userId String 
  user User @relation(fields: [userId], references: [id])
  posCash Float
  actualCash Float
  createdAt DateTime @default(now())
}

enum shiftType {
  opening
  closing
}
enum Role {
  cashier
  manager
  admin
}
enum Gender {
  male
  female
}

//Products related model------------------------------------------------------------
model Product {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  variants   ProductVariant[] //1 Product has many Variants (One to Many)
  categoryId Int //Foreign Key 
  category   Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime?      
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  size Size 
  price     Float?
  productId Int //Foreign Key (Many to One relation with Product)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime?

  @@unique([productId, size])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] //1 category has many Products (One to many)
  createdAt DateTime  @default(now())
}

enum Size {
  pt
  rg
  gr
}

// Order related models-------------------------------------------------------------
model Order {
  id         Int          @id @default(autoincrement())
  items      OrderItem[] //One to Many (One order have Many Order Items)
  total      Float
  type TYPE
  status     STATUS       @default(queue) 
  userId String //Foreign Key
  user User @relation(fields: [userId], references: [id])
  // voidedOrderId Int?
  // voidedOrder VoidedOrder? @relation("OrderToVoidOrder")
  createdAt  DateTime     @default(now())
}

model OrderItem {
  id              Int             @id @default(autoincrement())
  orderId         Int
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productName     String
  productSize     Size
  productPrice    Float
  quantity        Int
  subtotal        Float
  createdAt  DateTime     @default(now())    
}

// model VoidedOrder {
//   id Int @id @default(autoincrement())
//   orderId Int @unique
//   order Order @relation("OrderToVoidOrder", fields: [orderId], references: [id]) 
//   shiftId Int
//   shift Shift @relation(fields: [shiftId], references: [id])
//   userId String
//   user User @relation(fields: [userId], references: [id])
//   createdAt DateTime @default(now())
// }

enum TYPE {
  dine_in
  take_out
}

enum STATUS {
  queue
  completed
  voided
}


